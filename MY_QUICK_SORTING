//2019-01-25 JANGWON KIM
//*MY QUICK SORTING*
//#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
int size;
void swap(int*a, int*b)
{
	int temp;
	temp=*a;
	*a = *b;
	*b = temp;
}
int middle_value(int* array, int a, int b, int c)
{
	if ((array[a] >= array[b] && array[b] >= array[c]) || (array[c] >= array[b] && array[b] >= array[a]))
		return b;
	else if ((array[b] >= array[a] && array[a] >= array[c]) || (array[c] >= array[a] && array[a] >= array[b]))
		return a;
	else
		return c;

}
void q_sorting(int* array, int first, int last, int k) //q_sorting(배열 이름, 첫 인덱스, 마지막 인덱스, k값)
{ // k=1이면 오름차순, k=0이면 내림차순

	if (k == 1) //오름차순
	{
		if (first>=last)
		{
			return;
		}
		else
		{
			int pivot_index = middle_value(array, first, (first + last) / 2, last);
			swap(&array[pivot_index], &array[last]); //우선 pivot을 끝으로 보낸다.
			int ptr = first;
			for (int i = first; i < last; i++) //pivot을 제외한 나머지 원소들을 기준에 따라 정렬한다.
			{
				if (array[i] < array[last])
				{
					swap(&array[i], &array[ptr]);
					ptr = ptr + 1;
				}
			}
			swap(&array[last], &array[ptr]); //마지막으로 pivot을 기준점으로 놓는다.
			q_sorting(array, first, ptr - 1, k);
			q_sorting(array, ptr + 1, last, k);
		}
	}
	else //내림차순
	{
		if (first >= last)
		{
			return;
		}
		else
		{
			int pivot_index = middle_value(array, first, (first + last) / 2, last);
			swap(&array[pivot_index], &array[last]);
			int ptr = first;
			for (int i = first; i < last; i++)
			{
				if (array[i] > array[last])
				{
					swap(&array[i], &array[ptr]);
					ptr = ptr + 1;
				}
			}
			swap(&array[last], &array[ptr]);
			q_sorting(array, first, ptr - 1, k);
			q_sorting(array, ptr + 1, last, k);
		}
	}

}

int main()
{
	int N;
	scanf("%d", &N);
	int* array = (int*)malloc(N * sizeof(int));
	for (int i = 0; i < N; i++)
	{
		scanf("%d", &array[i]);
	}

	q_sorting(array, 0, N - 1, 1);
	for (int i = 0; i < N; i++)
	{
		printf("%d\n", array[i]);
	}

	return 0;
}
